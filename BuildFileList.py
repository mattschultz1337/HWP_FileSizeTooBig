#Created by Matthew Schultz
#mschultz@hwpnj.com
import subprocess as ps
import os
from os import stat
import sys
import datetime
import csv
import xlsxwriter
import win32com.client
from win32com.client import Dispatch, constants
import pandas as pd

# \\Server` Cleanup\\TEST\\Testlayer3\\Testlayer2

#must change all \ with \\ and all " "(space) with "` "(`space) for python to read the path correctly
path = 'X:\\'
CSVLoc = 'T:\\Technology\\Server` Cleanup\\AUTOGENERATED_Folder_list\\Files_Larger_than_100MB_AUTOGENERATED.csv'
final_list = 'T:\\Technology\\Server` Cleanup\\Files_Larger_than_100MB_AUTOGENERATED_FINAL.xlsx'

former_employee_sheet_CSV = 'T:\\Technology\\Server` Cleanup\\AUTOGENERATED_Folder_list\\former_employee_sheet.csv'
current_employee_sheet_CSV = 'T:\\Technology\\Server` Cleanup\\AUTOGENERATED_Folder_list\\current_employee_sheet.csv'

#Written by MaxU on StackOverflow
def append_df_to_excel(filename, df, sheet_name='Sheet1', startrow=None,
                       truncate_sheet=False,
                       **to_excel_kwargs):
    """
    Append a DataFrame [df] to existing Excel file [filename]
    into [sheet_name] Sheet.
    If [filename] doesn't exist, then this function will create it.

    Parameters:
      filename : File path or existing ExcelWriter
                 (Example: '/path/to/file.xlsx')
      df : dataframe to save to workbook
      sheet_name : Name of sheet which will contain DataFrame.
                   (default: 'Sheet1')
      startrow : upper left cell row to dump data frame.
                 Per default (startrow=None) calculate the last row
                 in the existing DF and write to the next row...
      truncate_sheet : truncate (remove and recreate) [sheet_name]
                       before writing DataFrame to Excel file
      to_excel_kwargs : arguments which will be passed to `DataFrame.to_excel()`
                        [can be dictionary]

    Returns: None
    """
    from openpyxl import load_workbook

    import pandas as pd

    # ignore [engine] parameter if it was passed
    if 'engine' in to_excel_kwargs:
        to_excel_kwargs.pop('engine')

    writer = pd.ExcelWriter(filename, engine='openpyxl')

    # Python 2.x: define [FileNotFoundError] exception if it doesn't exist
    try:
        FileNotFoundError
    except NameError:
        FileNotFoundError = IOError


    try:
        # try to open an existing workbook
        writer.book = load_workbook(filename)

        # get the last row in the existing Excel sheet
        # if it was not specified explicitly
        if startrow is None and sheet_name in writer.book.sheetnames:
            startrow = writer.book[sheet_name].max_row

        # truncate sheet
        if truncate_sheet and sheet_name in writer.book.sheetnames:
            # index of [sheet_name] sheet
            idx = writer.book.sheetnames.index(sheet_name)
            # remove [sheet_name]
            writer.book.remove(writer.book.worksheets[idx])
            # create an empty sheet [sheet_name] using old index
            writer.book.create_sheet(sheet_name, idx)

        # copy existing sheets
        writer.sheets = {ws.title:ws for ws in writer.book.worksheets}
    except FileNotFoundError:
        # file does not exist yet, we will create it
        pass

    if startrow is None:
        startrow = 0

    # write out the new sheet
    df.to_excel(writer, sheet_name, startrow=startrow, **to_excel_kwargs)

    # save the workbook
    writer.save()




generate_sheet = ps.Popen('powershell.exe Get-ChildItem ' + path + ' -Recurse -ErrorAction "SilentlyContinue" -force | select Directory, Name, @{N=\'Stakeholder\';E={$_.GetAccessControl().Owner.Split(\'\\\')[1]}}, Length | Where-Object {$_.Length -gt 100MB} | Export-CSV -NoTypeInformation -Path ' + CSVLoc)



print("Generating spreadsheet")
generate_sheet.wait()
print("Spreadsheet filled")
former_employee_sheet = ps.Popen('powershell.exe Get-ADUser -Filter * -SearchBase \'OU=Former Employees,OU=HWP Users,DC=hwp,DC=local\' | select SAMAccountName| Export-CSV -NoTypeInformation -Path ' + former_employee_sheet_CSV)
# | select displayname | Export-CSV -NoTypeInformation -Path ' + former_employee_sheet_CSV
former_employee_sheet.wait()
generate_employee_sheet = ps.Popen('powershell.exe  Get-ADUser -Filter * -SearchBase \'OU=HWPNJ, OU=HWP Users,DC=hwp,DC=local\' | select SAMAccountName, Name, givenname, surname | Export-CSV -NoTypeInformation -Path ' + current_employee_sheet_CSV)
generate_employee_sheet.wait()
CSVLoc = CSVLoc.replace("\\\\", "\\").replace("` ", " ")
final_list = final_list.replace("\\\\", "\\").replace("` ", " ")
former_employee_sheet_CSV = former_employee_sheet_CSV.replace("\\\\", "\\").replace("` ", " ")
current_employee_sheet_CSV = current_employee_sheet_CSV.replace("\\\\", "\\").replace("` ", " ")
# if we read f.csv we will write f.xlsx
wb = xlsxwriter.Workbook(CSVLoc.replace(".csv",".xlsx"))
ws = wb.add_worksheet("larger-100MB-TEMP")    # your worksheet title here
with open(CSVLoc,'r') as csvfile:
    table = csv.reader(csvfile)
    i = 0
    # write each row from the csv file as text into the excel file
    # this may be adjusted to use 'excel types' explicitly (see xlsxwriter doc)
    for row in table:
        ws.write_row(i, 0, row)
        i += 1
wb.close()

wb_FE = xlsxwriter.Workbook(former_employee_sheet_CSV.replace(".csv",".xlsx"))
ws_FE = wb_FE.add_worksheet("Sheet1")    # your worksheet title here
with open(former_employee_sheet_CSV,'r') as csvfile:
    table = csv.reader(csvfile)
    i = 0
    # write each row from the csv file as text into the excel file
    # this may be adjusted to use 'excel types' explicitly (see xlsxwriter doc)
    for row in table:
        ws_FE.write_row(i, 0, row)
        i += 1
wb_FE.close()
wb_CE = xlsxwriter.Workbook(current_employee_sheet_CSV.replace(".csv",".xlsx"))
ws_CE = wb_CE.add_worksheet("Sheet1")    # your worksheet title here
with open(current_employee_sheet_CSV,'r') as csvfile:
    table = csv.reader(csvfile)
    i = 0
    # write each row from the csv file as text into the excel file
    # this may be adjusted to use 'excel types' explicitly (see xlsxwriter doc)
    for row in table:
        ws_CE.write_row(i, 0, row)
        i += 1
wb_CE.close()

current_List = pd.read_excel (final_list, sheet_name='larger-100MB')
current_List = current_List.drop(columns=['Unnamed: 0'])
#Grab data from spreadsheet
allFiles = pd.read_excel (CSVLoc[:-4] + '.xlsx', sheet_name='larger-100MB-TEMP')
if allFiles.columns.shape[0]>0:
    allFiles.Stakeholder = allFiles.Stakeholder.astype(str)
former_employees = pd.read_excel(former_employee_sheet_CSV[:-4] + '.xlsx', sheet_name='Sheet1')
current_employee_sheet = pd.read_excel(current_employee_sheet_CSV[:-4] + '.xlsx', sheet_name="Sheet1")

 #stakeHolders = pd.DataFrame(allFiles, columns= ['Stake Holder'])
 #filePaths = pd.DataFrame(allFiles, columns= ['Directory'])
 #fileNames = pd.DataFrame(allFiles, columns= ['Name'])

if allFiles.shape[0] != 0:
    allFiles.insert(3, 'Date Contacted', '')
    allFiles.insert(0, 'Size - MB',  '')
    allFiles.insert(4, 'Emailed', 'NONE')
    allFiles.insert(7,'is_Employed', 1 )
    allFiles.insert(8, 'Status', 0)
today = datetime.datetime.now()
for i, tooLarge in allFiles.iterrows():
  stakeHolder = tooLarge['Stakeholder']
  curr_emp = current_employee_sheet[current_employee_sheet.SAMAccountName.str.upper()==stakeHolder.upper()]
  firstName = curr_emp['givenname']
  if stakeHolder in former_employees.SAMAccountName.values or tooLarge['Stakeholder']=="nan":
      tooLarge['Stakeholder'] = stakeHolder + "- GONE"
      tooLarge['is_Employed'] = 0
  if stakeHolder in current_employee_sheet.SAMAccountName.values:
      if curr_emp['Name'].str.contains(',').any():
          firstName = curr_emp['surname']
  filePath = tooLarge['Directory']
  fileName = tooLarge['Name']
  filesize = tooLarge['Length']
  tooLarge['Size - MB'] = "=(" + str(filesize) + "/1024)/1024"
  if stakeHolder == "nan":
    tooLarge['Stakeholder'] = "UNKNOWN"
  emailRecip = stakeHolder[len(tooLarge['Stakeholder'])-1:]
  emailRecip += stakeHolder[:-1]
  emailRecip += "@hwpnj.com"
  if tooLarge['is_Employed']==1:
      tooLarge['Emailed'] = emailRecip
  if stakeHolder=="Administrators":
      emailRecip = ""
      tooLarge['Emailed'] = "NONE"
  if stakeHolder=="pezzutikera":
    emailRecip = "kerapezzuti@hwpnj.com"
  fileLink = filePath.replace("\\", "/")
  fileLink = fileLink.replace(" ", "%20")
  if fileLink[:1] == "X":
        fileLink = fileLink[2:]
        fileLink = "promotional_wip/" + fileLink
        fileLink = "02/" + fileLink
  elif fileLink[:1]=="T":
        fileLink = fileLink[2:]
        fileLink = "hwp/" + fileLink
        fileLink = "02/" + fileLink
  elif fileLink[:1]=="Y":
      fileLink = fileLink[2:]
      fileLink = "promotional_archive/" + fileLink
      fileLink = "02/" + fileLink
  elif fileLink[:1]=="R":
      fileLink = fileLink[2:]
      fileLink = "cme/" + fileLink
      fileLink = "/" + fileLink
  elif fileLink[:1]=="V":
      fileLink = fileLink[2:]
      fileLink = "digital/" + fileLink
      fileLink = "/" + fileLink
  elif fileLink[:1]=="O":
      fileLink = fileLink[2:]
      fileLink = "budgets/" + fileLink
      fileLink = "/" + fileLink
  elif fileLink[:1]=="H":
      fileLink = fileLink[2:]
      fileLink = "hwp_history/" + fileLink
      fileLink = "/" + fileLink

  if stakeHolder == "hegartyjo":
      tooLarge['Emailed'] = "N/A John's File"
      print("John Hegarty Owned File: ")
      johnSheet = pd.read_excel (r'T:\Technology\Server Cleanup\JohnHegarty_FilesOver100MB.xlsx',  dtype={'Size - MB': float, 'Directory': str, 'Name': str, 'Size - Bytes': int, 'Notes': str})
      if ((johnSheet['Directory'] == filePath) & (johnSheet['Name'] == fileName)).any():
          print("Already noted in John's File")
      else:
          print("Adding to John's File")
          newJohnFile = pd.DataFrame({'Directory':[tooLarge['Directory']],'Name':[tooLarge['Name']], 'Notes':[""], 'Size - Bytes':[tooLarge['Length']],'Size - MB':[tooLarge['Size - MB']]})
          # print(johnSheet)
          # print(newJohnFile)
          johnSheet = johnSheet.append(newJohnFile, ignore_index=True, sort=False)
          johnSheet=johnSheet.drop(columns=['Unnamed: 0'])
          johnSheet.to_excel(r'T:\Technology\Server Cleanup\JohnHegarty_FilesOver100MB.xlsx')
  if tooLarge['Directory'] in current_List.Directory.values and tooLarge['Name'] in current_List.Name.values:
      tooLarge['Status'] = current_List.loc[current_List['Name']==tooLarge['Name']]['Status']

  if stakeHolder != "hegartyjo" and stakeHolder!="hegartyj" and stakeHolder != "nan" and tooLarge['is_Employed']==1 and stakeHolder != "Administrators" and tooLarge['Status']==0:
   # Create Email
    const=win32com.client.constants
    olMailItem = 0x0
    obj = win32com.client.Dispatch("Outlook.Application")
    newMail = obj.CreateItem(olMailItem)
    newMail.Subject = filePath[:1] + ":\ Cleanup"
    newMail.BodyFormat = 2 #HTML Text
    firstName_EMAIL = " " + str(firstName.values)[2:-2]
    newMail.HTMLBody = emailRecip + "<p>Hello" + firstName_EMAIL + ",</p><p>&nbsp;</p><p>I have been tasked with identifying large files on the " + filePath[:1] + ":\ and reaching out to the stake holder to identify the need (if any) for the file.&nbsp;</p><p>Please take a moment to review this file:</p><p><a href=\"file://ntnx-fs" + fileLink + "\">" + filePath + "\\" + fileName + "</a></p><p>If this file can be deleted, please do so.&nbsp; If this file should live in another location such as the V:\, please create the necessary folder, or folders, and move it there.&nbsp; If this file should be located where it is please leave it there.</p><p>&nbsp;</p><p>If you are not the stake holder, please direct me to the necessary person.</p><p>&nbsp;</p><p>Whatever you decide should be done please reply and let me know what you have done with the referenced file.</p><p>&nbsp;</p><p>Best,</p><p>Matthew Schultz</p><p>Health and Wellness Partners</p><p><a href=\"mailto:mschultz@hwpnj.com\">mschultz@hwpnj.com</a></p><p>&nbsp;</p><p><span style=\"color: black;\">The information contained in this e-mail message, together with any attachments thereto, legally protected confidential information and is intended only for the personal and confidential use of the addressee(s) named above. The message and any attachments to this message are privileged and protected communications.&nbsp; If you are not the intended recipient of this message, or authorized to receive it for the intended recipient, you have received this message in error. You are not to review, use, disseminate, distribute or copy this message, any attachments to this message, or their contents.&nbsp; If you have received this message in error, please immediately notify us by return e-mail message, and delete the original message.</span></p>"

    newMail.To = emailRecip
    #Uncomment when ready to deploy.
    # newMail.To = emailRecip
    print("Emailing " + emailRecip)
    newMail.Send()
    tooLarge['Date Contacted'] = str(today)
  if tooLarge['is_Employed']==0 or tooLarge['Stakeholder']=="UNKNOWN" or stakeHolder=="Administrators":
        print("NOT Emailing: " + tooLarge['Stakeholder'])
        tooLarge['Emailed']="NONE"
        tooLarge['Date Contacted'] = ""
  allFiles.loc[i] = tooLarge

for i, largeFile in allFiles.iterrows():
    for j, curr_files in current_List.iterrows():
        if curr_files['Status']==1 and os.path.isfile(curr_files['Directory'] + "\\" + curr_files['Name'])==False:
              curr_files['Status'] = 3
        if (largeFile['Directory'].replace("\\\\","\\")==curr_files['Directory']) and (largeFile['Name']==curr_files['Name']):
            allFiles = allFiles.drop(i)
        current_List.loc[j] = curr_files
current_List = current_List.append(allFiles, ignore_index=True, sort=False)

append_df_to_excel(final_list, current_List, sheet_name="larger-100MB", startrow=0)
os.remove(CSVLoc[:-4] + '.csv')
os.remove(CSVLoc[:-4] + '.xlsx')
os.remove(former_employee_sheet_CSV)
os.remove(current_employee_sheet_CSV)
# os.remove(former_employee_sheet_CSV[:-4] + '.xlsx')
# os.remove(current_employee_sheet_CSV[:-4] + '.xlsx')
